package ui

import (
	"fmt"
	"time"

	usecase_domain "github.com/8thgencore/dory-reminder-bot/internal/domain"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –ø–æ–≤—Ç–æ—Ä–æ–≤
const (
	repeatOnce    = "—Ä–∞–∑–æ–≤–æ"
	repeatDaily   = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
	repeatWeekly  = "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
	repeatMonthly = "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
	repeatYearly  = "–µ–∂–µ–≥–æ–¥–Ω–æ"
)

// FormatRepeat —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func FormatRepeat(r *usecase_domain.Reminder) string {
	switch r.Repeat {
	case usecase_domain.RepeatNone:
		return repeatOnce
	case usecase_domain.RepeatEveryDay:
		return repeatDaily
	case usecase_domain.RepeatEveryWeek:
		if len(r.RepeatDays) > 0 {
			weekday := r.RepeatDays[0]
			weekdayName := getWeekdayName(weekday)
			return fmt.Sprintf("%s (%s)", repeatWeekly, weekdayName)
		}

		return repeatWeekly
	case usecase_domain.RepeatEveryMonth:
		if len(r.RepeatDays) > 0 {
			return fmt.Sprintf("%s (%d-–≥–æ —á–∏—Å–ª–∞)", repeatMonthly, r.RepeatDays[0])
		}
		return repeatMonthly
	case usecase_domain.RepeatEveryYear:
		return repeatYearly
	case usecase_domain.RepeatEveryNDays:
		return fmt.Sprintf("–∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π", r.RepeatEvery)
	default:
		return "-"
	}
}

// FormatRepeatWithDetails —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
func FormatRepeatWithDetails(r *usecase_domain.Reminder, _ *time.Location) string {
	switch r.Repeat {
	case usecase_domain.RepeatNone:
		return repeatOnce
	case usecase_domain.RepeatEveryDay:
		return repeatDaily
	case usecase_domain.RepeatEveryWeek:
		if len(r.RepeatDays) > 0 {
			weekday := r.RepeatDays[0]
			weekdayName := getWeekdayName(weekday)
			return fmt.Sprintf("%s (%s)", repeatWeekly, weekdayName)
		}

		return repeatWeekly
	case usecase_domain.RepeatEveryMonth:
		if len(r.RepeatDays) > 0 {
			return fmt.Sprintf("%s (%d-–≥–æ —á–∏—Å–ª–∞)", repeatMonthly, r.RepeatDays[0])
		}
		return repeatMonthly
	case usecase_domain.RepeatEveryYear:
		return repeatYearly
	case usecase_domain.RepeatEveryNDays:
		return fmt.Sprintf("–∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π", r.RepeatEvery)
	default:
		return "-"
	}
}

// FormatStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
func FormatStatus(paused bool) string {
	if paused {
		return "üî¥ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
	}
	return "" // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞—Ç—É—Å
}

// FormatTime —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
func FormatTime(nextTime time.Time, loc *time.Location) string {
	nextTimeInTZ := nextTime.In(loc)
	return nextTimeInTZ.Format("02.01.2006 –≤ 15:04")
}

// getWeekdayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
func getWeekdayName(weekday int) string {
	weekdays := map[int]string{
		0: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		2: "–≤—Ç–æ—Ä–Ω–∏–∫",
		3: "—Å—Ä–µ–¥–∞",
		4: "—á–µ—Ç–≤–µ—Ä–≥",
		5: "–ø—è—Ç–Ω–∏—Ü–∞",
		6: "—Å—É–±–±–æ—Ç–∞",
	}
	if name, ok := weekdays[weekday]; ok {
		return name
	}

	return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}
