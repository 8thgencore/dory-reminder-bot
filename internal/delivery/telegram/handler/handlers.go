package handler

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/session"
	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/texts"
	usecase_domain "github.com/8thgencore/dory-reminder-bot/internal/domain"
	"github.com/8thgencore/dory-reminder-bot/internal/usecase"
	"github.com/8thgencore/dory-reminder-bot/pkg/validator"
	tele "gopkg.in/telebot.v4"
)

var (
	welcomeTextNoTZ = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. üåç\n\n–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone"
	welcomeText     = `ü§ñ *Dory Reminder Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.`
	helpText = `*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/pause - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/timezone - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å`
)

// checkTimezone –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ç–∞–π–º–∑–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (h *Handler) checkTimezone(c tele.Context) (bool, error) {
	return h.UserUsecase.HasTimezone(context.Background(), c.Chat().ID, c.Sender().ID)
}

// getReminders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞.
func (h *Handler) getReminders(chatID int64) ([]*usecase_domain.Reminder, error) {
	return h.Usecase.ListReminders(context.Background(), chatID)
}

// getReminderNumber –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
func getReminderNumber(arg string) (int, error) {
	num, err := strconv.Atoi(strings.TrimSpace(arg))
	if err != nil || num <= 0 {
		return 0, fmt.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
	}
	return num, nil
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
func (h *Handler) HandleStart(c tele.Context, userUc usecase.UserUsecase) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	username := c.Sender().Username
	firstName := c.Sender().FirstName
	lastName := c.Sender().LastName

	slog.Info("User started bot", "user_id", userID, "chat_id", chatID, "username", username)

	_, err := userUc.GetOrCreateUser(context.Background(), chatID, userID, username, firstName, lastName)
	if err != nil {
		return c.Send(texts.ErrInitUser)
	}
	hasTZ, err := userUc.HasTimezone(context.Background(), chatID, userID)
	if err != nil {
		return c.Send(texts.ErrCheckSettings)
	}
	if !hasTZ {
		return c.Send(texts.WelcomeTextNoTZ)
	}
	return c.Send(texts.WelcomeText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, h.GetMainMenu())
}

// HandleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
func (h *Handler) HandleHelp(c tele.Context) error {
	slog.Info("User requested help", "user_id", c.Sender().ID, "chat_id", c.Chat().ID)
	return c.Send(texts.HelpText)
}

func (h *Handler) onAdd(c tele.Context) error {
	hasTZ, err := h.checkTimezone(c)
	if err != nil {
		return c.Send(texts.ErrCheckSettings)
	}
	if !hasTZ {
		return c.Send("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone")
	}
	if c.Message().Payload != "" {
		return c.Send("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ /add –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
	}
	return c.Send(texts.AddTypePrompt)
}

// –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
func (h *Handler) cbAddToday(c tele.Context) error    { return h.HandleAddTypeCallback(c, "today") }
func (h *Handler) cbAddTomorrow(c tele.Context) error { return h.HandleAddTypeCallback(c, "tomorrow") }
func (h *Handler) cbAddMultiDay(c tele.Context) error { return h.HandleAddTypeCallback(c, "multiday") }
func (h *Handler) cbAddEveryDay(c tele.Context) error { return h.HandleAddTypeCallback(c, "everyday") }
func (h *Handler) cbAddWeek(c tele.Context) error     { return h.HandleAddTypeCallback(c, "week") }
func (h *Handler) cbAddNDays(c tele.Context) error    { return h.HandleAddTypeCallback(c, "ndays") }
func (h *Handler) cbAddMonth(c tele.Context) error    { return h.HandleAddTypeCallback(c, "month") }
func (h *Handler) cbAddYear(c tele.Context) error     { return h.HandleAddTypeCallback(c, "year") }
func (h *Handler) cbAddDate(c tele.Context) error     { return h.HandleAddTypeCallback(c, "date") }

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ç–∞–π–º–∑–æ–Ω–∞)
func (h *Handler) onText(c tele.Context) error {
	sess := h.Session.Get(c.Chat().ID, c.Sender().ID)
	if sess != nil && sess.Step == session.StepTimezone {
		return h.HandleTimezoneText(c)
	}
	if sess != nil && (sess.Step == session.StepTime || sess.Step == session.StepText || sess.Step == session.StepInterval) {
		return h.HandleAddWizardText(c)
	}
	return nil
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const remindersPerPage = 10

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–∞
func formatRepeat(r *usecase_domain.Reminder) string {
	switch r.Repeat {
	case usecase_domain.RepeatNone:
		return "—Ä–∞–∑–æ–≤–æ"
	case usecase_domain.RepeatEveryDay:
		return "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
	case usecase_domain.RepeatEveryWeek:
		return "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
	case usecase_domain.RepeatEveryMonth:
		return "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
	case usecase_domain.RepeatEveryNDays:
		return fmt.Sprintf("–∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π", r.RepeatEvery)
	default:
		return "-"
	}
}

// –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (h *Handler) onList(c tele.Context) error {
	reminders, err := h.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send(texts.ErrGetReminders)
	}
	if len(reminders) == 0 {
		return c.Send(texts.ErrNoReminders)
	}
	page := 0
	if cb := c.Callback(); cb != nil && strings.HasPrefix(cb.Data, "rem_page_") {
		if p, err := strconv.Atoi(strings.TrimPrefix(cb.Data, "rem_page_")); err == nil && p >= 0 {
			page = p
		}
	}
	start, end := page*remindersPerPage, (page+1)*remindersPerPage
	if end > len(reminders) {
		end = len(reminders)
	}
	msg := "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
	for i := start; i < end; i++ {
		r := reminders[i]
		status := "‚úÖ"
		if r.Paused {
			status = "‚è∏Ô∏è"
		}
		msg += fmt.Sprintf("%s %d. %s\n   üìÖ %s\n   üîÅ %s\n\n", status, i+1, r.Text, r.NextTime.Format("02.01.2006 15:04"), formatRepeat(r))
	}
	var nav tele.ReplyMarkup
	rows := []tele.Row{}
	if start > 0 {
		rows = append(rows, nav.Row(nav.Data("‚¨Ö –ù–∞–∑–∞–¥", "rem_page_"+strconv.Itoa(page-1))))
	}
	if end < len(reminders) {
		rows = append(rows, nav.Row(nav.Data("–î–∞–ª–µ–µ ‚û°", "rem_page_"+strconv.Itoa(page+1))))
	}
	if len(rows) > 0 {
		nav.Inline(rows...)
		if c.Callback() != nil {
			return c.Edit(msg, &nav)
		}
		return c.Send(msg, &nav)
	}
	if c.Callback() != nil {
		return c.Edit(msg)
	}
	return c.Send(msg)
}

func (h *Handler) onEdit(c tele.Context) error {
	args := strings.Fields(strings.TrimSpace(c.Message().Payload))
	if len(args) < 2 {
		return c.Send("–§–æ—Ä–º–∞—Ç: /edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> –∏–ª–∏ /edit <–Ω–æ–º–µ—Ä> <–≤—Ä–µ–º—è> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
	}
	num, err := getReminderNumber(args[0])
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}
	reminders, err := h.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}
	rem := reminders[num-1]

	// –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –≤—Ä–µ–º—è, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –≤—Ä–µ–º—è, –∏ —Ç–µ–∫—Å—Ç
	newTime := ""
	newText := ""
	if len(args) >= 3 && validator.IsTime(args[1]) {
		newTime = args[1]
		newText = strings.Join(args[2:], " ")
	} else {
		newText = strings.Join(args[1:], " ")
	}
	if newTime != "" {
		if !validator.IsTime(newTime) {
			return c.Send("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 15:00")
		}
		rem.NextTime = validator.NextTimeFromString(newTime, rem.NextTime)
	}
	if newText != "" {
		rem.Text = newText
	}
	err = h.Usecase.EditReminder(context.Background(), rem)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	}
	return c.Send("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
}

// –£–¥–∞–ª–µ–Ω–∏–µ, –ø–∞—É–∑–∞, –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
func (h *Handler) handleReminderAction(c tele.Context, action string, do func(remID int64) error) error {
	arg := strings.TrimSpace(c.Message().Payload)
	num, err := getReminderNumber(arg)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}
	reminders, err := h.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}
	rem := reminders[num-1]
	if err := do(rem.ID); err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ %s –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", action))
	}
	return c.Send(fmt.Sprintf("%s –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ %s!", map[string]string{"delete": "üóëÔ∏è", "pause": "‚è∏Ô∏è", "resume": "‚ñ∂Ô∏è"}[action], map[string]string{"delete": "—É–¥–∞–ª–µ–Ω–æ", "pause": "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É", "resume": "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ"}[action]))
}

func (h *Handler) onDelete(c tele.Context) error {
	return h.handleReminderAction(c, "delete", func(remID int64) error {
		return h.Usecase.DeleteReminder(context.Background(), remID)
	})
}

func (h *Handler) onPause(c tele.Context) error {
	return h.handleReminderAction(c, "pause", func(remID int64) error {
		return h.Usecase.PauseReminder(context.Background(), remID)
	})
}

func (h *Handler) onResume(c tele.Context) error {
	return h.handleReminderAction(c, "resume", func(remID int64) error {
		return h.Usecase.ResumeReminder(context.Background(), remID)
	})
}

func (h *Handler) onTimezone(c tele.Context) error {
	h.Session.Set(&session.AddReminderSession{
		UserID: c.Sender().ID,
		ChatID: c.Chat().ID,
		Step:   session.StepTimezone,
	})
	return c.Send("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow, America/New_York, Asia/Tokyo):")
}
