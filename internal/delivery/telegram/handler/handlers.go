package handler

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	usecase_domain "github.com/8thgencore/dory-reminder-bot/internal/domain"
	"github.com/8thgencore/dory-reminder-bot/internal/usecase"
	tele "gopkg.in/telebot.v4"
)

var (
	welcomeTextNoTZ = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. üåç\n\n–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone"
	welcomeText     = `ü§ñ *Dory Reminder Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.`
	helpText = `*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/pause - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/timezone - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å`
)

func (h *Handler) HandleStart(c tele.Context, userUc usecase.UserUsecase) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	username := c.Sender().Username
	firstName := c.Sender().FirstName
	lastName := c.Sender().LastName

	slog.Info("User started bot", "user_id", userID, "chat_id", chatID, "username", username)

	// Create or update user
	_, err := userUc.GetOrCreateUser(context.Background(), chatID, userID, username, firstName, lastName)
	if err != nil {
		slog.Error("Failed to create/update user", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	// Check if user has timezone set
	hasTZ, err := userUc.HasTimezone(context.Background(), chatID, userID)
	if err != nil {
		slog.Error("Failed to check user timezone", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if !hasTZ {
		return c.Send(welcomeTextNoTZ)
	}

	return c.Send(welcomeText, &tele.SendOptions{
		ParseMode: tele.ModeMarkdown,
	}, h.GetMainMenu())
}

func (h *Handler) HandleHelp(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	slog.Info("User requested help", "user_id", userID, "chat_id", chatID)

	return c.Send(helpText)
}

func (h *Handler) onAdd(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	slog.Info("User started add reminder wizard", "user_id", userID, "chat_id", chatID, "chat_type", c.Chat().Type)

	// Check if user has timezone set
	hasTZ, err := h.UserUsecase.HasTimezone(context.Background(), chatID, userID)
	if err != nil {
		slog.Error("Failed to check user timezone", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if !hasTZ {
		return c.Send("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone")
	}

	if c.Message().Payload != "" {
		return c.Send("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ /add –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
	}
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", addMenu)
}

func (h *Handler) cbAddToday(c tele.Context) error    { return h.HandleAddTypeCallback(c, "today") }
func (h *Handler) cbAddTomorrow(c tele.Context) error { return h.HandleAddTypeCallback(c, "tomorrow") }
func (h *Handler) cbAddMultiDay(c tele.Context) error { return h.HandleAddTypeCallback(c, "multiday") }
func (h *Handler) cbAddEveryDay(c tele.Context) error { return h.HandleAddTypeCallback(c, "everyday") }
func (h *Handler) cbAddWeek(c tele.Context) error     { return h.HandleAddTypeCallback(c, "week") }
func (h *Handler) cbAddNDays(c tele.Context) error    { return h.HandleAddTypeCallback(c, "ndays") }
func (h *Handler) cbAddMonth(c tele.Context) error    { return h.HandleAddTypeCallback(c, "month") }
func (h *Handler) cbAddYear(c tele.Context) error     { return h.HandleAddTypeCallback(c, "year") }
func (h *Handler) cbAddDate(c tele.Context) error     { return h.HandleAddTypeCallback(c, "date") }

func (h *Handler) onText(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	sess := h.Session.Get(chatID, userID)

	if sess != nil && sess.Step == StepTimezone {
		return h.HandleTimezoneText(c)
	}

	// Check if user is in add wizard
	if sess != nil && (sess.Step == StepTime || sess.Step == StepText) {
		return h.HandleAddWizardText(c)
	}

	return nil // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤ –º–∞—Å—Ç–µ—Ä–µ
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const remindersPerPage = 10

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
func formatRepeat(r *usecase_domain.Reminder) string {
	switch r.Repeat {
	case usecase_domain.RepeatNone:
		return "—Ä–∞–∑–æ–≤–æ"
	case usecase_domain.RepeatEveryDay:
		return "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
	case usecase_domain.RepeatEveryWeek:
		return "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
	case usecase_domain.RepeatEveryMonth:
		return "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
	case usecase_domain.RepeatEveryNDays:
		return fmt.Sprintf("–∫–∞–∂–¥—ã–µ %d –¥–Ω–µ–π", r.RepeatEvery)
	default:
		return "-"
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (h *Handler) onList(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	slog.Info("User requested reminders list", "user_id", userID, "chat_id", chatID)

	reminders, err := h.Usecase.ListReminders(context.Background(), chatID)
	if err != nil {
		slog.Error("Failed to get reminders list", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if len(reminders) == 0 {
		slog.Info("User has no reminders", "user_id", userID, "chat_id", chatID)
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	page := 0
	if c.Callback() != nil {
		// –ï—Å–ª–∏ —ç—Ç–æ callback, —Ç–æ —á–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
		data := c.Callback().Data
		if strings.HasPrefix(data, "rem_page_") {
			p, err := strconv.Atoi(strings.TrimPrefix(data, "rem_page_"))
			if err == nil && p >= 0 {
				page = p
			}
		}
	}
	start := page * remindersPerPage
	end := start + remindersPerPage
	if end > len(reminders) {
		end = len(reminders)
	}

	msg := "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
	for i := start; i < end; i++ {
		r := reminders[i]
		status := "‚úÖ"
		if r.Paused {
			status = "‚è∏Ô∏è"
		}
		mode := formatRepeat(r)
		msg += fmt.Sprintf("%s %d. %s\n   üìÖ %s\n   üîÅ %s\n\n", status, i+1, r.Text, r.NextTime.Format("02.01.2006 15:04"), mode)
	}

	// –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	var nav tele.ReplyMarkup
	rows := []tele.Row{}
	if start > 0 {
		rows = append(rows, nav.Row(nav.Data("‚¨Ö –ù–∞–∑–∞–¥", "rem_page_"+strconv.Itoa(page-1))))
	}
	if end < len(reminders) {
		rows = append(rows, nav.Row(nav.Data("–î–∞–ª–µ–µ ‚û°", "rem_page_"+strconv.Itoa(page+1))))
	}
	if len(rows) > 0 {
		nav.Inline(rows...)
		if c.Callback() != nil {
			return c.Edit(msg, &nav)
		}
		return c.Send(msg, &nav)
	}
	if c.Callback() != nil {
		return c.Edit(msg)
	}
	return c.Send(msg)
}

func formatReminder(idx int, r *usecase_domain.Reminder) string {
	return fmt.Sprintf("%d. %s (%s)", idx, r.Text, r.NextTime.Format("02.01.2006 15:04"))
}

func (h *Handler) onEdit(c tele.Context) error {
	return c.Send("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
}

func (h *Handler) onDelete(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	arg := strings.TrimSpace(c.Message().Payload)

	if arg == "" {
		return c.Send("–§–æ—Ä–º–∞—Ç: /delete <–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞>. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 2")
	}
	num, err := strconv.Atoi(arg)
	if err != nil || num <= 0 {
		slog.Warn("Invalid delete reminder number", "user_id", userID, "chat_id", chatID, "input", arg)
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}

	reminders, err := h.Usecase.ListReminders(context.Background(), chatID)
	if err != nil {
		slog.Error("Failed to get reminders for deletion", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		slog.Warn("Delete reminder number out of range", "user_id", userID, "chat_id", chatID, "number", num, "total", len(reminders))
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}

	rem := reminders[num-1]
	err = h.Usecase.DeleteReminder(context.Background(), rem.ID)
	if err != nil {
		slog.Error("Failed to delete reminder", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	}

	slog.Info("Reminder deleted", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "text", rem.Text)
	return c.Send("üóëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
}

func (h *Handler) onPause(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	arg := strings.TrimSpace(c.Message().Payload)

	if arg == "" {
		return c.Send("–§–æ—Ä–º–∞—Ç: /pause <–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞>. –ù–∞–ø—Ä–∏–º–µ—Ä: /pause 2")
	}
	num, err := strconv.Atoi(arg)
	if err != nil || num <= 0 {
		slog.Warn("Invalid pause reminder number", "user_id", userID, "chat_id", chatID, "input", arg)
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}

	reminders, err := h.Usecase.ListReminders(context.Background(), chatID)
	if err != nil {
		slog.Error("Failed to get reminders for pause", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		slog.Warn("Pause reminder number out of range", "user_id", userID, "chat_id", chatID, "number", num, "total", len(reminders))
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}

	rem := reminders[num-1]
	err = h.Usecase.PauseReminder(context.Background(), rem.ID)
	if err != nil {
		slog.Error("Failed to pause reminder", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	}

	slog.Info("Reminder paused", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "text", rem.Text)
	return c.Send("‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É!")
}

func (h *Handler) onResume(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	arg := strings.TrimSpace(c.Message().Payload)

	if arg == "" {
		return c.Send("–§–æ—Ä–º–∞—Ç: /resume <–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞>. –ù–∞–ø—Ä–∏–º–µ—Ä: /resume 2")
	}
	num, err := strconv.Atoi(arg)
	if err != nil || num <= 0 {
		slog.Warn("Invalid resume reminder number", "user_id", userID, "chat_id", chatID, "input", arg)
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}

	reminders, err := h.Usecase.ListReminders(context.Background(), chatID)
	if err != nil {
		slog.Error("Failed to get reminders for resume", "user_id", userID, "chat_id", chatID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		slog.Warn("Resume reminder number out of range", "user_id", userID, "chat_id", chatID, "number", num, "total", len(reminders))
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}

	rem := reminders[num-1]
	err = h.Usecase.ResumeReminder(context.Background(), rem.ID)
	if err != nil {
		slog.Error("Failed to resume reminder", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	}

	slog.Info("Reminder resumed", "user_id", userID, "chat_id", chatID, "reminder_id", rem.ID, "text", rem.Text)
	return c.Send("‚ñ∂Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
}

func (h *Handler) onTimezone(c tele.Context) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID
	slog.Info("User requested timezone setup", "user_id", userID, "chat_id", chatID)

	// Create session for timezone input
	session := &AddReminderSession{
		UserID: userID,
		ChatID: chatID,
		Step:   StepTimezone,
	}
	h.Session.Set(session)

	return c.Send("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow, America/New_York, Asia/Tokyo):")
}
