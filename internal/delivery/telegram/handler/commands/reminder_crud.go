package commands

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/handler/texts"
	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/handler/ui"
	usecase_domain "github.com/8thgencore/dory-reminder-bot/internal/domain"
	"github.com/8thgencore/dory-reminder-bot/internal/usecase"
	"github.com/8thgencore/dory-reminder-bot/pkg/validator"
	tele "gopkg.in/telebot.v4"
)

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const remindersPerPage = 10

// ReminderCRUD —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
type ReminderCRUD struct {
	Usecase     usecase.ReminderUsecase
	ChatUsecase usecase.ChatUsecase
}

// NewReminderCRUD —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ReminderCRUD
func NewReminderCRUD(reminderUc usecase.ReminderUsecase, chatUc usecase.ChatUsecase) *ReminderCRUD {
	return &ReminderCRUD{
		Usecase:     reminderUc,
		ChatUsecase: chatUc,
	}
}

// checkTimezone –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ç–∞–π–º–∑–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (rc *ReminderCRUD) checkTimezone(c tele.Context) (bool, error) {
	return rc.ChatUsecase.HasTimezone(context.Background(), c.Chat().ID)
}

// getReminders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
func (rc *ReminderCRUD) getReminders(chatID int64) ([]*usecase_domain.Reminder, error) {
	return rc.Usecase.ListReminders(context.Background(), chatID)
}

// getReminderNumber –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
func getReminderNumber(arg string) (int, error) {
	num, err := strconv.Atoi(strings.TrimSpace(arg))
	if err != nil || num <= 0 {
		return 0, errors.New("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
	}
	return num, nil
}

// OnAdd –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add
func (rc *ReminderCRUD) OnAdd(c tele.Context) error {
	hasTZ, err := rc.checkTimezone(c)
	if err != nil {
		return c.Send(texts.ErrCheckSettings)
	}
	if !hasTZ {
		return c.Send("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone")
	}
	if c.Message().Payload != "" {
		return c.Send("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ /add –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
	}

	return c.Send(texts.HelpAdd, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, ui.GetAddMenu())
}

// OnList –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list
func (rc *ReminderCRUD) OnList(c tele.Context) error {
	reminders, err := rc.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send(texts.ErrGetReminders)
	}
	if len(reminders) == 0 {
		return c.Send(texts.ErrNoReminders)
	}

	// –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	loc := time.UTC
	if ch, err := rc.ChatUsecase.Get(context.Background(), c.Chat().ID); err == nil && ch != nil && ch.Timezone != "" {
		if l, err := time.LoadLocation(ch.Timezone); err == nil {
			loc = l
		}
	}

	page := 0
	if cb := c.Callback(); cb != nil {
		data := strings.TrimSpace(cb.Data)
		if strings.HasPrefix(data, "rem_page_") {
			if p, err := strconv.Atoi(strings.TrimPrefix(data, "rem_page_")); err == nil && p >= 0 {
				page = p
			}
		}
	}

	start, end := page*remindersPerPage, (page+1)*remindersPerPage
	if end > len(reminders) {
		end = len(reminders)
	}

	var builder strings.Builder
	builder.WriteString("üìã *–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n")

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —á–∞—Ç–∞
	if ch, err := rc.ChatUsecase.Get(context.Background(), c.Chat().ID); err == nil && ch != nil && ch.Timezone != "" {
		builder.WriteString(fmt.Sprintf("üïê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* %s\n\n", ch.Timezone))
	}

	for i := start; i < end; i++ {
		r := reminders[i]

		// –°—Ç–∞—Ç—É—Å —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
		status := ui.FormatStatus(r.Paused)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		timeStr := ui.FormatTime(r.NextTime, loc)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		repeatStr := ui.FormatRepeatWithDetails(r, loc)

		builder.WriteString(fmt.Sprintf("*%d.* %s\n", i+1, ui.EscapeMarkdown(r.Text)))

		// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
		if status != "" {
			builder.WriteString(fmt.Sprintf("   %s | üìÖ %s\n", status, timeStr))
		} else {
			builder.WriteString(fmt.Sprintf("   üìÖ %s\n", timeStr))
		}

		builder.WriteString(fmt.Sprintf("   üîÅ %s\n", repeatStr))
		builder.WriteString("\n")
	}

	msg := builder.String()

	var nav tele.ReplyMarkup
	rows := []tele.Row{}
	if start > 0 {
		rows = append(rows, nav.Row(nav.Data("‚¨Ö –ù–∞–∑–∞–¥", "rem_page_"+strconv.Itoa(page-1))))
	}
	if end < len(reminders) {
		rows = append(rows, nav.Row(nav.Data("–î–∞–ª–µ–µ ‚û°", "rem_page_"+strconv.Itoa(page+1))))
	}

	options := &tele.SendOptions{ParseMode: tele.ModeMarkdown}

	if len(rows) > 0 {
		nav.Inline(rows...)
		if c.Callback() != nil {
			return c.Edit(msg, options, &nav)
		}
		return c.Send(msg, options, &nav)
	}

	if c.Callback() != nil {
		return c.Edit(msg, options)
	}

	return c.Send(msg, options)
}

// OnEdit –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /edit
func (rc *ReminderCRUD) OnEdit(c tele.Context) error {
	args := strings.Fields(strings.TrimSpace(c.Message().Payload))
	if len(args) < 2 {
		return c.Send("–§–æ—Ä–º–∞—Ç: /edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> –∏–ª–∏ /edit <–Ω–æ–º–µ—Ä> <–≤—Ä–µ–º—è> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
	}

	num, err := getReminderNumber(args[0])
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}

	reminders, err := rc.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}

	rem := reminders[num-1]

	// –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –≤—Ä–µ–º—è, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –≤—Ä–µ–º—è, –∏ —Ç–µ–∫—Å—Ç
	newTime := ""
	newText := ""
	if len(args) >= 3 && validator.IsTime(args[1]) {
		newTime = args[1]
		newText = strings.Join(args[2:], " ")
	} else {
		newText = strings.Join(args[1:], " ")
	}

	if newTime != "" {
		if !validator.IsTime(newTime) {
			return c.Send("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 15:00")
		}
		rem.NextTime = validator.NextTimeFromString(newTime, rem.NextTime)
	}
	if newText != "" {
		rem.Text = newText
	}

	err = rc.Usecase.EditReminder(context.Background(), rem)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
	}

	return c.Send("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
}

// handleReminderAction - –æ–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–∞—É–∑—ã, –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (rc *ReminderCRUD) handleReminderAction(c tele.Context, action string, do func(remID int64) error) error {
	arg := strings.TrimSpace(c.Message().Payload)
	num, err := getReminderNumber(arg)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞")
	}

	reminders, err := rc.getReminders(c.Chat().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}
	if num > len(reminders) {
		return c.Send("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")
	}

	rem := reminders[num-1]
	if err := do(rem.ID); err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ %s –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", action))
	}

	actionEmojis := map[string]string{"delete": "üóëÔ∏è", "pause": "‚è∏Ô∏è", "resume": "‚ñ∂Ô∏è"}
	actionTexts := map[string]string{"delete": "—É–¥–∞–ª–µ–Ω–æ", "pause": "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É", "resume": "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ"}

	return c.Send(fmt.Sprintf("%s –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ %s!", actionEmojis[action], actionTexts[action]))
}

// OnDelete –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete
func (rc *ReminderCRUD) OnDelete(c tele.Context) error {
	return rc.handleReminderAction(c, "delete", func(remID int64) error {
		return rc.Usecase.DeleteReminder(context.Background(), remID)
	})
}

// OnPause –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pause
func (rc *ReminderCRUD) OnPause(c tele.Context) error {
	return rc.handleReminderAction(c, "pause", func(remID int64) error {
		return rc.Usecase.PauseReminder(context.Background(), remID)
	})
}

// OnResume –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /resume
func (rc *ReminderCRUD) OnResume(c tele.Context) error {
	return rc.handleReminderAction(c, "resume", func(remID int64) error {
		return rc.Usecase.ResumeReminder(context.Background(), remID)
	})
}
