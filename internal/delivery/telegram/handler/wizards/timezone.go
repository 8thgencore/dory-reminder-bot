package wizards

import (
	"context"
	"log/slog"
	"strings"

	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/handler/texts"
	"github.com/8thgencore/dory-reminder-bot/internal/delivery/telegram/session"
	"github.com/8thgencore/dory-reminder-bot/internal/usecase"
	"github.com/8thgencore/dory-reminder-bot/pkg/timezone"
	tele "gopkg.in/telebot.v4"
)

// TimezoneWizard –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
type TimezoneWizard struct {
	UserUsecase    usecase.UserUsecase
	SessionManager *session.Manager
	GetMainMenu    func() *tele.ReplyMarkup
}

// NewTimezoneWizard —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
// NewTimezoneWizard —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
func NewTimezoneWizard(userUc usecase.UserUsecase, sessionMgr *session.Manager,
	getMainMenu func() *tele.ReplyMarkup,
) *TimezoneWizard {
	return &TimezoneWizard{
		UserUsecase:    userUc,
		SessionManager: sessionMgr,
		GetMainMenu:    getMainMenu,
	}
}

// OnTimezone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /timezone
func (tw *TimezoneWizard) OnTimezone(c tele.Context) error {
	tw.SessionManager.Set(&session.AddReminderSession{
		UserID: c.Sender().ID,
		ChatID: c.Chat().ID,
		Step:   session.StepTimezone,
	})

	return c.Send("üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow, America/New_York, Asia/Tokyo):")
}

// HandleTimezoneText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
func (tw *TimezoneWizard) HandleTimezoneText(c tele.Context, botName string) error {
	userID := c.Sender().ID
	chatID := c.Chat().ID

	// –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	tz := strings.TrimSpace(c.Text())
	tz = strings.ReplaceAll(tz, "@"+botName, "")
	tz = strings.TrimSpace(tz)

	if !timezone.IsValidTimezone(tz) {
		return c.Send(texts.UnknownTimezone)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–π–º–∑–æ–Ω–∞ —Ä–∞–Ω–µ–µ
	hadTimezone, err := tw.UserUsecase.HasTimezone(context.Background(), chatID, userID)
	if err != nil {
		slog.Error("Failed to check timezone", "user_id", userID, "chat_id", chatID, "error", err)
		hadTimezone = false // —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–∞–π–º–∑–æ–Ω—ã –Ω–µ –±—ã–ª–æ
	}

	err = tw.UserUsecase.SetTimezone(context.Background(), chatID, userID, tz)
	if err != nil {
		slog.Error("Failed to set custom timezone", "user_id", userID, "chat_id", chatID, "timezone", tz, "error", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
	}

	tw.SessionManager.Delete(chatID, userID)

	slog.Info("Custom timezone set", "user_id", userID, "chat_id", chatID, "timezone", tz)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
	successMsg := "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + tz

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
	if !hadTimezone {
		return c.Send(successMsg+"\n\n"+texts.HelpMainMenu, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, tw.GetMainMenu())
	}

	return c.Send(successMsg)
}
